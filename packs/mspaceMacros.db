{"name":"Augment Skill","type":"script","author":"yqvzivEUrtE3gfYM","img":"icons/svg/dice-target.svg","scope":"global","command":"//Augment Skill\nconst skillArray = token.actor.items.filter(skill => \n    skill.type === \"standardSkill\"||\n    skill.type === \"professionalSkill\"||\n    skill.type === \"combatStyle\"||\n    skill.type === \"magicSkill\"||\n    skill.type === \"passion\");\n\nskillArray.sort(function (a, b) {\n    let nameA = a.name.toUpperCase();\n    let nameB = b.name.toUpperCase();\n    if (nameA < nameB) {\n        return -1;\n    } if (nameA > nameB) {\n        return 1;\n    }\n    return 0\n    });\n\nconst skillOptions = [];\n\nfor (let i of skillArray) {\n    let option = `<option>${i.name}</option>`\n    skillOptions.push(option);\n}\n\nconst d = new Dialog({\n    title: \"Augmented Skill Roll\",\n    content: `<form>\n            <div style=\"border: inset; margin: 5px; padding: 5px;\">\n                <div>\n                    <i>Augmenting a skill adds twice the augmenting skill's critical range (20% of that skill's value) to the total value \n                        of the skill roll.\n                    </i>\n                </div>\n                <div style=\"text-align: right;\">\n                    <label style=\"font-weight: bold;\">Skill being Augmented:\n                        <select id=\"skillToRoll\">\n                            ${skillOptions.join(\"\")}\n                        </select>\n                    </label>\n                </div>\n                <div style=\"text-align: right;\">\n                    <label style=\"font-weight: bold;\">Augmenting Skill:\n                        <select id=\"augSkill\"\">\n                            ${skillOptions.join(\"\")}\n                        </select>\n                    </label>\n                </div>\n            </div>\n              </form>`,\n    buttons: {\n        one: {\n            label: \"Roll\",\n            callback: html => {\n                const skillToRollName = html.find(`[id=\"skillToRoll\"]`).val();\n                const skillToRoll = token.actor.items.find(i => i.name === skillToRollName);\n\n                const augSkillName = html.find(`[id=\"augSkill\"]`).val();\n                const augSkill = token.actor.items.find(i => i.name === augSkillName);\n\n                const newSkillValue = Math.ceil(augSkill.data.data.totalVal*.2) + skillToRoll.data.data.totalVal;\n                console.log(\"%s augments %s with %s for a new total of %i\", token.actor.name, skillToRollName, augSkillName, newSkillValue);\n\n                let diceRoll = new Roll(\"1d100\");\n                diceRoll.roll()\n                \n                const diffGrades = [2, 1.5, 1, 2/3, 0.5, 0.1];\n                const tableEntries = [];\n\n                for (let i of diffGrades){\n                    let label = \"\";\n                    let diffValue = Math.ceil(newSkillValue * i);\n                    let resultLabel = \"\";\n\n                    if (diceRoll.result <= Math.ceil(skillToRoll.data.data.totalVal * 0.1)){\n                        resultLabel = `<span style=\"font-weight: bold; color: goldenrod;\">CRITICAL</span>`\n                    } else if (diceRoll.result == 99||diceRoll.result == 100){\n                        resultLabel = `<span style=\"font-weight: bold; color: darkred;\">FUMBLE</span>`\n                    } else if (diceRoll.result <= diffValue){\n                        resultLabel = `<span style=\"font-weight: bold; color: green;\">SUCCESS</span>`\n                    } else if (diceRoll.result > diffValue){\n                        resultLabel = `<span style=\"font-weight: bold; color: red;\">FAILURE</span>`\n                    }\n\n                    if (i === 2){\n                        label = \"Very Easy\";\n                    } else if (i === 1.5) {\n                        label = \"Easy\";\n                    } else if (i === 1) {\n                        label = \"Standard\";\n                    } else if (i === 2/3) {\n                        label = \"Hard\";\n                    } else if (i === 0.5) {\n                        label = \"Formidable\";\n                    } else if (i === 0.1) {\n                        label = \"Herculean\";\n                    }\n\n                    let entry = `<tr>\n                                    <td style=\"font-weight: bold;\">${label}:</td>\n                                    <td style=\"font-weight: bold;\">[[${diceRoll.result}]]</td>\n                                    <td style=\"font-weight: bold;\">[[${diffValue}]]</td>\n                                    <td style=\"font-weight: bold;\">${resultLabel}</td>\n                                </tr>`\n\n                    tableEntries.push(entry);\n\n                }\n\n\n               let contentString = `<table>\n                                    <tr>\n                                        <th>Difficulty</th>\n                                        <th>Roll</th>\n                                        <th>Skill %</th>\n                                        <th>Result</th> \n                                    </tr>\n                                    ${tableEntries.join(\"\")}\n                                </table>`\n\n                diceRoll.toMessage({\n                    user: game.user.id,\n                    speaker: ChatMessage.getSpeaker(),\n                    flavor: `${skillToRollName} (${skillToRoll.data.data.totalVal}%) augmented by ${augSkillName} (${Math.ceil(augSkill.data.data.totalVal * .2)}%)`,\n                    content: contentString\n                  })\n\n            }\n        },\n        two: {\n            label: \"Cancel\",\n            callback: html => console.log(\"Cancelled\")\n        }\n    },\n    default: \"one\",\n    close: html => console.log()\n})\n\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"yqvzivEUrtE3gfYM":3},"flags":{"core":{"sourceId":"Macro.nc3p8S1V6t3wJCXD"}},"_id":"gj3PSTf2gKtTWNBt"}
{"name":"Reset Action Points","type":"script","author":"yqvzivEUrtE3gfYM","img":"icons/svg/dice-target.svg","scope":"global","command":"//Reset Action Points for Active Scene Combat\n\nlet activeScene = game.scenes.find(i => i.active === true).id;\nlet activeSceneCombat = game.combats.find(i => i.data.scene === activeScene);\nlet combatants = activeSceneCombat.data.combatants;\nlet currentRound = activeSceneCombat.current.round;\n\nlet d = new Dialog({\n    title: \"Reset All Combatant Action Points\",\n    content: `<form>\n                <div>\n                    <i>Are you sure you want to reset the Action Points of <b>all active combatants on the current active scene?</b></i>\n                </div>\n            </form>`,\n    buttons: {\n        one: {\n            label: \"Reset Action Points\",\n            callback: async (html) => {\n                for (let c of combatants) {\n                    let ap = c.actor.data.data.currentActionPoints;\n                    let maxAP = c.actor.data.data.attributes.actionPoints.max;\n\n                    ap = maxAP;\n                    c.actor.update({\"data.currentActionPoints\" : ap});\n                }\n                ChatMessage.create({\n                    user: game.user.id,\n                    speaker: ChatMessage.getSpeaker(),\n                    content: `<div>\n                                <h2>Current Round: ${currentRound}</h2>\n                                <label>All action points reset!</b></label>\n                              </div>`\n                })\n            }\n        },\n        two: {\n            label: \"Cancel\",\n            callback: html => console.log(\"Cancelled\")\n        }\n    },\n    default: \"one\",\n    close: html => console.log()\n});\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"yqvzivEUrtE3gfYM":3},"flags":{"core":{"sourceId":"Macro.5GTYw0k80rfABfiN"}},"_id":"mnmpba94Yuevhqqj"}
{"name":"Encounter Generator","type":"script","author":"yqvzivEUrtE3gfYM","img":"icons/svg/dice-target.svg","scope":"global","command":"// Mythras Encounter Generator\n// In order to use, create a new macro in Foundry, set it to \"script\" mode, and copy/paste this code into the text box. Then just hit \"Execute Macro\"\n\nencounterGenerator()\n\nfunction encounterGenerator() {\n  let template = `\n    <h2>Click <a href=\"https://gitlab.com/tpaoloni/mythras/-/tags/0.1.4\">here</a> for instructions</h1>\n    <h4><i/>Future releases of this macro will be located in the <a href=\"https://foundryvtt.com/packages/mythras-not-so-imperative\">Mythras Not So Imperative</a> module</i></h4>\n    <h3>Generate a single enemy</h2>\n    <p>Mythras Encounter Generator Enemy ID: <input type=\"number\" id=\"megid-enemy\" /></p>\n    <p>or<p>\n    <p>Mythras Encounter Generator Enemy JSON: <input type=\"text\" id=\"megJSON-enemy\" /></p>\n    <p><b>OR</b></p>\n    <h3>Generate a party</h2>\n    <p>Mythras Encounter Generator Party ID: <input type=\"number\" id=\"megid-party\" /></p>\n    <p>or<p>\n    <p>Mythras Encounter Generator Party JSON: <input type=\"text\" id=\"megJSON-party\" /></p>\n  `\n  new Dialog({\n    title: 'Mythras Encounter Generator',\n    content: template,\n    buttons: {\n      ok: {\n        label: 'Create Actor',\n        callback: async (html) => {\n          generate(html)\n        }\n      },\n      cancel: {\n        label: 'Cancel'\n      }\n    }\n  }).render(true)\n}\n\nasync function generate(html) {\n  let enemyId = html.find('#megid-enemy')[0].value\n  let enemyJSON = html.find('#megJSON-enemy')[0].value\n  let partyId = html.find('#megid-party')[0].value\n  let partyJSON = html.find('#megJSON-party')[0].value\n  if (\n    (enemyId !== '' && partyId !== '') ||\n    (enemyJSON !== '' && partyJSON !== '') ||\n    (enemyId !== '' && partyJSON !== '') ||\n    (enemyJSON !== '' && partyId !== '')\n  ) {\n    // Tried to make it pull up an error dialog here, but wasn't working\n    // await new Dialog({\n    //   title: \"Error\",\n    //   content: \"Please only enter one of ID\",\n    //   buttons: {\n    //     ok: {\n    //       label: \"Okay\",\n    //       callback: async (html) => {\n    //         encounterGenerator();\n    //       },\n    //     },\n    //   },\n    // });\n  } else if (enemyJSON !== '') {\n    generateEnemy(enemyJSON, 2)\n  } else if (enemyId !== '') {\n    generateEnemy(enemyId, 1)\n  } else if (partyJSON !== '') {\n    generateParty(partyJSON, 2)\n  } else if (partyId !== '') {\n    generateParty(partyId, 1)\n  }\n}\n\nasync function generateParty(partyData, type) {\n  if (type == 1) {\n    $.get(\n      `https://thingproxy.freeboard.io/fetch/https://skoll.xyz/mythras_eg/generate_party_json/?id=${partyData}`,\n      async (data) => {\n        Folder.create({\n          name: `${data['party_name']}`,\n          type: 'Actor',\n          parent: null\n        }).then((folder) => {\n          data.enemies.forEach((enemy) => {\n            createActor(enemy, folder.id)\n          })\n        })\n      }\n    )\n  } else if (type == 2) {\n    let data = JSON.parse(partyData)\n    Folder.create({\n      name: `${data['party_name']}`,\n      type: 'Actor',\n      parent: null\n    }).then((folder) => {\n      data.enemies.forEach((enemy) => {\n        createActor(enemy, folder.id)\n      })\n    })\n  }\n}\n\nasync function generateEnemy(enemyData, type) {\n  if (type == 1) {\n    $.get(\n      `https://thingproxy.freeboard.io/fetch/https://skoll.xyz/mythras_eg/generate_enemies_json/?id=${enemyData}`,\n      async (data) => {\n        let skollEnemy = data[0]\n        createActor(skollEnemy, null)\n      }\n    )\n  } else if (type == 2) {\n    createActor(JSON.parse(enemyData)[0], null)\n  }\n}\n\nasync function createActor(skollEnemy, folder) {\n  /**************** Setup ******************/\n  let actorData = {}\n  actorData.characteristics = {}\n  let actorItems = []\n\n  let standardSkills = {}\n  let professionalSkills = {}\n  let magicSkills = [\n    'Folk Magic',\n    'Binding',\n    'Trance',\n    'Mysticism',\n    'Meditation',\n    'Devotion',\n    'Exhort',\n    'Invocation',\n    'Shaping'\n  ]\n  let featuresList = []\n  let abilities = ''\n  let promiseChain = Promise.resolve()\n\n  // Load standard skills from compendium\n  promiseChain.then(\n    await game.packs\n      .get('mythras.standardSkill')\n      .getDocuments()\n      .then((result) => {\n        result.forEach((skill, index) => {\n          standardSkills[skill.data.name.toLocaleLowerCase()] = skill.data.data\n        })\n      })\n  )\n\n  // Load professional skills from compendium\n  promiseChain.then(\n    await game.packs\n      .get('mythras.professionalSkill')\n      .getDocuments()\n      .then((result) => {\n        result.forEach((skill, index) => {\n          professionalSkills[skill.data.name.toLocaleLowerCase()] =\n            skill.data.data\n        })\n      })\n  )\n\n  /******* Map Skoll Data to Actor Data *********/\n  // Characteristics\n  promiseChain.then(() => {\n    skollEnemy.stats.forEach((stat) => {\n      let statName = Object.keys(stat)[0]\n      let statNameLower = statName.toLocaleLowerCase()\n      actorData.characteristics[statNameLower] = {\n        value: stat[statName],\n        mod: 0\n      }\n    })\n  })\n  // Combat Styles and Weapons\n  promiseChain.then(() => {\n    skollEnemy['combat_styles'].forEach((skill) => {\n      let skillName = skill.name\n      let skillType = 'combatStyle'\n      let skillData = {}\n      let baseScore =\n        actorData.characteristics['str'].value +\n        actorData.characteristics['dex'].value\n      let trainingScore = Number(skill.value) - Number(baseScore)\n      skillData.trainingVal = trainingScore\n      let weaponNames = []\n      skill.weapons.forEach((weapon) => {\n        weaponNames.push(weapon.name)\n        let weaponData = {}\n        let name = ''\n        let type = 'melee-weapon'\n\n        name = weapon.name\n        weaponData.ap = weapon.ap\n        weaponData.hp = weapon.hp\n        weaponData.damage = weapon.damage\n        weaponData.damageModifier = weapon['add_damage_modifier']\n        weaponData['combat-effects'] = weapon.effects\n        if (weapon.type === 'ranged') {\n          type = 'ranged-weapon'\n          let rangeInc = weapon.range.split('/')\n          if (rangeInc.length === 3) {\n            weaponData.range = {\n              close: rangeInc[0],\n              effective: rangeInc[1],\n              long: rangeInc[2]\n            }\n          }\n          weaponData.force = weapon.size\n        } else {\n          type = 'melee-weapon'\n          name += weapon.type.includes('2h') ? ' (Two-handed)' : ''\n          weaponData.reach = weapon.reach\n          weaponData.size = weapon.size\n        }\n        actorItems.push({\n          name: name,\n          type: type,\n          data: weaponData\n        })\n      })\n      skillData.weapons = weaponNames.join(', ')\n      actorItems.push({\n        name: skillName,\n        type: skillType,\n        data: skillData\n      })\n    })\n  })\n  // Skills\n  promiseChain.then(() => {\n    skollEnemy.skills.forEach((skill) => {\n      let skillName = Object.keys(skill)[0]\n      let skillNameLower = skillName.toLocaleLowerCase()\n      let skillType = ''\n      let skillData = {}\n      let primaryChar = 11\n      if (actorData.characteristics[skillData.primaryChar] !== undefined) {\n        primaryChar = actorData.characteristics[skillData.primaryChar].value\n      }\n      let secondaryChar = 11\n      if (actorData.characteristics[skillData.secondaryChar] !== undefined) {\n        secondaryChar = actorData.characteristics[skillData.secondaryChar].value\n      }\n      if (standardSkills[skillNameLower]) {\n        skillType = 'standardSkill'\n        skillData = standardSkills[skillNameLower]\n        let baseScore = primaryChar + secondaryChar\n        let trainingScore = skill[skillName] - baseScore\n        skillData.trainingVal = trainingScore\n      } else if (magicSkills.includes(skillName)) {\n        skillType = 'magicSkill'\n        skillData = professionalSkills[skillNameLower]\n        let baseScore = primaryChar + secondaryChar\n        let trainingScore = skill[skillName] - baseScore\n        skillData.trainingVal = trainingScore\n      } else if (professionalSkills[skillNameLower]) {\n        skillType = 'professionalSkill'\n        skillData = professionalSkills[skillNameLower]\n        let baseScore = primaryChar + secondaryChar\n        let trainingScore = skill[skillName] - baseScore\n        skillData.trainingVal = trainingScore\n      } else if (skillName.split(':')[0].trim() === 'Passion') {\n        let oldSkillName = skillName\n        skillName = skillName.split(':')[1].trim()\n        skillType = 'passion'\n        let baseScore = primaryChar + secondaryChar\n        let trainingScore = skill[oldSkillName] - baseScore\n        skillData = {\n          description: '',\n          primaryChar: 'int',\n          secondaryChar: 'int',\n          baseVal: { value: 0, init: 0 },\n          trainingVal: trainingScore,\n          miscBonus: 0,\n          totalVal: 0\n        }\n      } else {\n        skillType = 'professionalSkill'\n        let baseScore =\n          actorData.characteristics['str'].value +\n          actorData.characteristics['str'].value\n        let trainingScore = skill[skillName] - baseScore\n        skillData = {\n          description: '',\n          primaryChar: 'str',\n          secondaryChar: 'str',\n          baseVal: { value: baseScore, init: baseScore },\n          trainingVal: trainingScore,\n          miscBonus: 0,\n          totalVal: skill[skillName]\n        }\n      }\n\n      actorItems.push({\n        name: skillName,\n        type: skillType,\n        data: skillData\n      })\n    })\n  })\n  // Hit Locations\n  promiseChain.then(() => {\n    skollEnemy.hit_locations.forEach((hitLocation) => {\n      let type = 'hitLocation'\n\n      let name = hitLocation.name\n\n      let rollRanges = hitLocation.range.split('-')\n      let rollRangeStart = parseInt(rollRanges[0], 10)\n      let rollRangeEnd = parseInt(rollRanges[1], 10)\n\n      let con = 11\n      if (actorData.characteristics['con'] !== undefined) {\n        con = actorData.characteristics['con'].value\n      }\n      let siz = 11\n      if (actorData.characteristics['siz'] !== undefined) {\n        siz = actorData.characteristics['siz'].value\n      }\n      let hpBonus = Math.ceil((Number(con) + Number(siz)) / 5)\n      let baseHp = hitLocation.hp - hpBonus\n      let currentHp = hitLocation.hp\n\n      let data = {\n        rollRangeStart: rollRangeStart,\n        rollRangeEnd: rollRangeEnd,\n        baseHp: baseHp,\n        naturalArmor: hitLocation.ap,\n        maxHp: 0,\n        currentHp: currentHp\n      }\n\n      actorItems.push({\n        name: name,\n        type: type,\n        data: data\n      })\n    })\n  })\n  // Abilities and Journal\n  promiseChain.then(() => {\n    if (skollEnemy.features.length > 0) {\n      featuresList.push('<h2>Features</h2>')\n      skollEnemy.features.forEach((feature) => {\n        if (feature.includes('Ability')) {\n          let featureSplit = feature.split('***')\n          let featureJoin =\n            '<strong>' + featureSplit[1] + ':</strong> ' + featureSplit[2]\n          featuresList.push(featureJoin)\n        } else {\n          featuresList.push(feature)\n        }\n      })\n    }\n    if (skollEnemy['folk_spells'].length > 0) {\n      featuresList.push('<br>')\n      featuresList.push('<h2>Folk Magic</h2>')\n      featuresList = featuresList.concat(skollEnemy['folk_spells'])\n    }\n    if (skollEnemy['theism_spells'].length > 0) {\n      featuresList.push('<br>')\n      featuresList.push('<h2>Theism</h2>')\n      featuresList = featuresList.concat(skollEnemy['theism_spells'])\n    }\n    if (skollEnemy['sorcery_spells'].length > 0) {\n      featuresList.push('<br>')\n      featuresList.push('<h2>Sorcery</h2>')\n      featuresList = featuresList.concat(skollEnemy['sorcery_spells'])\n    }\n    if (skollEnemy['spirits'].length > 0) {\n      featuresList.push('<br>')\n      featuresList.push('<h2>Animism</h2>')\n      let spiritList = ''\n      skollEnemy.spirits.forEach((spirit) => {\n        spiritList += '<h3>' + spirit.name + '</h3>'\n        spiritList += '<ul>'\n        if (spirit.features.length > 0) {\n          spiritList += '<li><strong>Spirit Abilities</strong></li>'\n          spiritList += '<ul><li>'\n          spiritList += spirit.features.join('</li><li>')\n          spiritList += '</li></ul>'\n        }\n        spiritList += `<li><strong>Characteristics:</strong> INT: ${spirit.stats[0].INT}, POW: ${spirit.stats[1].POW}, CHA: ${spirit.stats[2].CHA}`\n        spiritList += `<li><strong>Attributes:</strong> \n          Intensity: ${spirit.attributes['spirit_intensity']}, \n          Magic Points: ${spirit.attributes['magic_points']}, \n          Spirit Damage: ${spirit.attributes['spirit_damage']}, \n          Initiative: ${spirit.attributes['strike_rank']}, \n          Action Points: ${spirit.attributes['action_points']}</li>`\n        if (spirit.skills.length > 0) {\n          spiritList += '<li><strong>Skills:</strong> '\n          let tempSkillList = []\n          spirit.skills.forEach((skill) => {\n            let skillName = Object.keys(skill)[0]\n            tempSkillList.push(skillName + ': ' + skill[skillName])\n          })\n          spiritList += tempSkillList.join(', ')\n        }\n        if (spirit['folk_spells'].length > 0) {\n          spiritList +=\n            '<li><strong>Folk Magic:</strong> ' +\n            spirit['folk_spells'].join(', ') +\n            '</li>'\n        }\n        if (spirit['theism_spells'].length > 0) {\n          spiritList +=\n            '<li><strong>Theism:</strong> ' +\n            spirit['theism_spells'].join(', ') +\n            '</li>'\n        }\n        if (spirit['sorcery_spells'].length > 0) {\n          spiritList +=\n            '<li><strong>Sorcery:</strong> ' +\n            spirit['sorcery_spells'].join(', ') +\n            '</li>'\n        }\n        if (spirit.notes.length > 0) {\n          spiritList += '<li><strong>Notes:</strong> ' + spirit.notes\n        }\n        spiritList += '</ul>'\n      })\n\n      featuresList.push(spiritList)\n    }\n    abilities += featuresList.join('<br>')\n    actorData.abilitiesDesc = abilities\n    actorData.journal = skollEnemy.notes\n  })\n  // Add additional promises to the chain here for weapons and other stuff\n  // (adding to the chain is not strictly necessary but helpful for organization. Also guarantees the order things will be run)\n\n  /*********** Create the Actor *************/\n  promiseChain.then(() => {\n    Actor.create({\n      name: skollEnemy.name,\n      type: 'character',\n      data: actorData,\n      items: actorItems,\n      folder: folder\n    }).then((actor) => {\n      // May need to add armor to the actor here since hitlocs exists here (or add another promise to the chain after the actor create one? i dunno)\n      // Testing that hitlocs exist here\n      let skollmod = skollEnemy.attributes.strike_rank\n      let mod = 0\n      if (skollmod.includes('-')) {\n        let splitArray = skollmod.split('-')\n        mod = '-' + splitArray[splitArray.length - 1].split(')')[0]\n      } else if (skollmod.includes('+')) {\n        let splitArray = skollmod.split('+')\n        mod = splitArray[splitArray.length - 1].split(')')[0]\n      }\n      if (mod !== 0) {\n        actor.update({\n          ['data.attributes.initiativeBonus.mod']: Number(mod)\n        })\n      }\n    })\n  })\n}","folder":null,"sort":0,"permission":{"default":0,"yqvzivEUrtE3gfYM":3},"flags":{"core":{"sourceId":"Macro.5M4m7pN1XHSurPry"}},"_id":"qr7mU970CtchVEkK"}
{"_id":"u01P0uVmMtczLd2V","name":"XP Macro","type":"script","author":"yqvzivEUrtE3gfYM","img":"icons/svg/dice-target.svg","scope":"global","command":"//XP Award Macro\nconst users = game.users;\nconst players = [];\nconst characterCards = [];\nconst characterCardDisplay = [];\nconst playerInputs = [];\n\n//Create Character Cards for UI\n  for (let u of users) {\n    if (!u.isGM && u.name !== \"Gamemaster (Disabled)\") {\n      players.push(u);\n    \n    let chaName = u.character.name;\n    let characterCard = {[chaName]: `<div style=\"float: left; width: 100%; border: inset; margin: 5px; background-color: rgba(78, 78, 78, 0.137);\">\n                          <img src=\"${u.character.img}\" height=\"110\" width=\"110\" style=\"float: left; margin: 5px;\"/>\n                          <h2 style=\"float: top;\">${chaName}</h2>\n\n                            <div style=\"display: inline-block; width: 65%;\">\n                              <table>\n                                <tr>\n                                  <th>Awarded XP</th>\n                                  <td><input type=\"number\" class=\"${chaName}\" id=\"${chaName}\" value=\"0\" style=\"text-align: center; width: 100px;\"/></td>\n                                </tr>\n                                <tr>\n                                  <th>Current XP</th>\n                                  <td><input type=\"number\" value=\"${u.character.data.data.experienceRolls}\" disabled style=\"text-align: center; width: 100px;\"/></td>\n                                </tr>\n                              </table>\n                            </div>\n\n\n                        </div>`}\n    characterCards.push(characterCard);\n    }\n  }\n\n  //Join the HTML Character Cards in object\n  for (let u of players) {\n    for (let key of characterCards) {\n      let chaName = u.character.name;\n      let card = key[chaName]\n      characterCardDisplay.push(card);\n    }\n}\n\n//Draw Dialog Window\nlet d = new Dialog({\n  title: \"Award Player XP Rolls\",\n  content: `<form>\n              <div style=\"margin-right: 5px; margin-left: 0px;\">\n                  ${characterCardDisplay.join(\"\")}\n              </div>\n            </form>`,\n  buttons: {\n    one: {\n      label: \"Cancel\",\n      callback: html => console.log(\"Cancelled\")\n    },\n    two: {\n      label: \"Award XP\",\n      callback: async (html) => {\n        for (let u of players) {\n          let chaName = u.character.name;\n          let xp = Number(u.character.data.data.experienceRolls);\n          let xpAwarded = parseInt(html.find(`[id=\"${chaName}\"]`).val());\n          let xpMod = Number(u.character.data.data.attributes.experienceMod.value);\n\n          console.log(\"%s was awarded %i XP + %i XP Mod\", chaName, xpAwarded, xpMod);\n\n          if (xpAwarded == undefined || xpAwarded == null) {\n            xpAwarded = 0;\n          }\n\n          xp = xp + xpAwarded + xpMod;\n          u.character.update({\"data.experienceRolls\" : xp});\n\n          ChatMessage.create({\n            user: game.user.id,\n            speaker: ChatMessage.getSpeaker(),\n            content: `<img src=\"${u.character.img}\" height=75 width=75 style='margin-right: 5px; margin-top: 5px; margin-bottom: 5px; float: left;'</img>\n                      <h2 style='font-size: large'>${chaName}</h2>\n                      <i>${chaName} received <b>${xpAwarded} + ${xpMod}</b> XP!</i>`\n          })\n\n        }\n      }\n    }\n  },\n  default: \"one\",\n  close: html => console.log(\"Cancelled\")\n})\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"yqvzivEUrtE3gfYM":3},"flags":{"core":{"sourceId":"Macro.WHHHJ6bq3utVHJeO"}}}
{"name":"All In One Combat Roll","type":"script","author":"yqvzivEUrtE3gfYM","img":"icons/svg/dice-target.svg","scope":"global","command":"const skillArray = token.actor.items.filter(skill => skill.type === \"combatStyle\");\nconst weaponArray = token.actor.items.filter(weapon => weapon.type === \"melee-weapon\"||weapon.type === \"ranged-weapon\");\n\nskillArray.sort(function (a, b) {\n    let nameA = a.name.toUpperCase();\n    let nameB = b.name.toUpperCase();\n    if (nameA < nameB) {\n        return -1;\n    } if (nameA > nameB) {\n        return 1;\n    }\n    return 0\n    });\n\nconst skillOptions = [];\nconst weaponOptions = [];\n\nfor (let i of skillArray) {\n    let option = `<option>${i.name}</option>`\n    skillOptions.push(option);\n}\n\nfor (let i of weaponArray) {\n    let option = `<option>${i.name}</option>`\n    weaponOptions.push(option);\n}\n\nconst d = new Dialog({\n    title: \"All-In-One Combat Roll\",\n    content: `<form>\n                <div style=\"border: inset; margin: 5px; padding: 5px;\">\n\n                    <div style=\"margin: 5px;\">\n                        <i>\n                            Select a Combat Style and Weapon. This will roll Combat Style, Weapon Damage, and Hit Location.\n                        </i>\n                    </div>\n                        <hr>\n\n                        <div>\n                            <label style=\"font-weight: bold;\">Combat Style:\n                                <select id=\"skillToRoll\">\n                                    ${skillOptions.join(\"\")}\n                                </select>\n                            </label>\n                            <p></p>\n                            <label style=\"font-weight: bold;\">Weapon:\n                                <select id=\"weaponToRoll\"\">\n                                    ${weaponOptions.join(\"\")}\n                                </select>\n                            </label>\n                            <p></p>\n                            <label title=\"Check this to reduce ammo count by 1 after rolling if attacking with a ranged weapon\">\n                                <input id=\"ammoReduction\" type=\"checkbox\">\n                                <b>Reduce Ammo by 1</b>\n                            </label>\n                        </div>\n\n                </div>\n              </form>`,\n    buttons: {\n        one: {\n            label: \"Roll\",\n            callback: html => {\n                const skillToRollName = html.find(`[id=\"skillToRoll\"]`).val();\n                const skillToRoll = skillArray.find(i => i.name === skillToRollName);\n\n                const weaponName = html.find(`[id=\"weaponToRoll\"]`).val();\n                const weapon = weaponArray.find(i => i.name === weaponName);\n                let weaponDamage = \"\";\n                if (weapon.data.data.damageModifier){\n                    weaponDamage = `${weapon.data.data.damage} + ${token.actor.data.data.attributes.damageMod.value}`;\n                } else {\n                    weaponDamage = weapon.data.data.damage;\n                }\n\n                const combatStyleValue = skillToRoll.data.data.totalVal;\n\n                let combatRoll = new Roll(\"1d100\");\n                let weaponRoll = new Roll(weaponDamage);\n                let hitLocRoll = new Roll(\"1d20\");\n                let hitLocRoll2 = new Roll(\"1d10+10\");\n                let hitLocRoll3 = new Roll(\"1d10\")\n                combatRoll.roll();\n                weaponRoll.roll();\n                hitLocRoll.roll();\n                hitLocRoll2.roll();\n                hitLocRoll3.roll();\n                \n                const diffGrades = [2, 1.5, 1, 2/3, 0.5, 0.1];\n                const tableEntries = [];\n\n                for (let i of diffGrades){\n                    let label = \"\";\n                    let diffValue = Math.ceil(combatStyleValue * i);\n                    let resultLabel = \"\";\n\n                    if (combatRoll.result <= Math.ceil(skillToRoll.data.data.totalVal * 0.1)){\n                        resultLabel = `<span style=\"font-weight: bold; color: goldenrod;\">CRITICAL</span>`\n                    } else if (combatRoll.result == 99||combatRoll.result == 100){\n                        resultLabel = `<span style=\"font-weight: bold; color: darkred;\">FUMBLE</span>`\n                    } else if (combatRoll.result <= diffValue){\n                        resultLabel = `<span style=\"font-weight: bold; color: green;\">SUCCESS</span>`\n                    } else if (combatRoll.result > diffValue){\n                        resultLabel = `<span style=\"font-weight: bold; color: red;\">FAILURE</span>`\n                    }\n\n                    if (i === 2){\n                        label = \"Very Easy\";\n                    } else if (i === 1.5) {\n                        label = \"Easy\";\n                    } else if (i === 1) {\n                        label = \"Standard\";\n                    } else if (i === 2/3) {\n                        label = \"Hard\";\n                    } else if (i === 0.5) {\n                        label = \"Formidable\";\n                    } else if (i === 0.1) {\n                        label = \"Herculean\";\n                    }\n\n                    let entry = `<tr>\n                                    <td style=\"font-weight: bold;\">${label}:</td>\n                                    <td style=\"font-weight: bold;\">[[${combatRoll.result}]]</td>\n                                    <td style=\"font-weight: bold;\">[[${diffValue}]]</td>\n                                    <td style=\"font-weight: bold;\">${resultLabel}</td>\n                                </tr>`\n\n                    tableEntries.push(entry);\n\n                }\n\n\n                let contentString = `<div>\n                                    <table>\n                                        <tr>\n                                            <th>Difficulty</th>\n                                            <th>Roll</th>\n                                            <th>Skill %</th>\n                                            <th>Result</th> \n                                        </tr>\n                                        ${tableEntries.join(\"\")}\n                                    </table>\n                                </div>\n\n                                <div>\n                                    <label><b>Damage: [[${weaponRoll.result}]]</b> ${weaponRoll.formula}</label>\n                                </div>\n                                <hr>\n                                <div>\n                                    <label><b>Hit Location: [[${hitLocRoll.result}]]</b> ${hitLocRoll.formula}</label>\n                                </div>\n                                <hr>\n                                <div>\n                                    <label><b>Hit Location (High): [[${hitLocRoll2.result}]]</b> ${hitLocRoll2.formula}</label>\n                                </div>\n                                <hr>\n                                <div>\n                                    <label><b>Hit Location (Low): [[${hitLocRoll3.result}]]</b> ${hitLocRoll3.formula}</label>\n                                </div>`\n                                \n                const reduceAmmo = html.find(`[id=\"ammoReduction\"]`)[0].checked;\n                if (weapon.type === \"ranged-weapon\" && reduceAmmo) {\n                    if (weapon.data.data.ammo <= 0) {\n                        ui.notifications.info(\"You are out of ammunition for this weapon, please select another weapon\");\n                    } else {\n                        weapon.data.data.ammo = weapon.data.data.ammo - 1;\n                        weapon.update({\"data.ammo\": weapon.data.data.ammo});\n\n                        ChatMessage.create({\n                            type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n                            user: game.user.id,\n                            speaker: ChatMessage.getSpeaker(),\n                            flavor: `Rolling ${skillToRollName} and attacking with ${weaponName}`,\n                            content: contentString,\n                            roll: combatRoll, weaponRoll, hitLocRoll\n                        })\n                    }\n                } else {\n                    ChatMessage.create({\n                        type: CONST.CHAT_MESSAGE_TYPES.ROLL,\n                        user: game.user.id,\n                        speaker: ChatMessage.getSpeaker(),\n                        flavor: `Rolling ${skillToRollName} and attacking with ${weaponName}`,\n                        content: contentString,\n                        roll: combatRoll, weaponRoll, hitLocRoll\n                    })\n                }\n            }\n        },\n        two: {\n            label: \"Cancel\",\n            callback: html => console.log(\"Cancelled\")\n        }\n    },\n    default: \"one\",\n    close: html => console.log()\n})\n\nd.render(true);","folder":null,"sort":0,"permission":{"default":0,"yqvzivEUrtE3gfYM":3},"flags":{"core":{"sourceId":"Macro.DeXlwD6qZ24saAac"}},"_id":"vgtBEH1CkmHg15no"}
